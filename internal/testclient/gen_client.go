// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package testclient

import (
	"context"
	"net/http"
	"time"

	"github.com/Yamashou/gqlgenc/client"
	"go.infratographer.com/x/gidx"
)

type TestClient interface {
	GetTodo(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*GetTodo, error)
}

type Client struct {
	Client *client.Client
}

func NewClient(cli *http.Client, baseURL string, options ...client.HTTPRequestOption) TestClient {
	return &Client{Client: client.NewClient(cli, baseURL, options...)}
}

type Query struct {
	Todo     Todo     "json:\"todo\" graphql:\"todo\""
	Entities []Entity "json:\"_entities\" graphql:\"_entities\""
	Service  Service  "json:\"_service\" graphql:\"_service\""
}
type Mutation struct {
	TodoCreate TodoCreatePayload "json:\"todoCreate\" graphql:\"todoCreate\""
	TodoUpdate TodoUpdatePayload "json:\"todoUpdate\" graphql:\"todoUpdate\""
	TodoDelete TodoDeletePayload "json:\"todoDelete\" graphql:\"todoDelete\""
}
type GetTodo struct {
	Todo struct {
		ID          gidx.PrefixedID "json:\"id\" graphql:\"id\""
		Name        string          "json:\"name\" graphql:\"name\""
		Description *string         "json:\"description\" graphql:\"description\""
		Tenant      struct {
			ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
		} "json:\"tenant\" graphql:\"tenant\""
		CreatedAt time.Time "json:\"createdAt\" graphql:\"createdAt\""
		UpdatedAt time.Time "json:\"updatedAt\" graphql:\"updatedAt\""
	} "json:\"todo\" graphql:\"todo\""
}

const GetTodoDocument = `query GetTodo ($id: ID!) {
	todo(id: $id) {
		id
		name
		description
		tenant {
			id
		}
		createdAt
		updatedAt
	}
}
`

func (c *Client) GetTodo(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*GetTodo, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res GetTodo
	if err := c.Client.Post(ctx, "GetTodo", GetTodoDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}
