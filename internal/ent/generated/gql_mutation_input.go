// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"go.infratographer.com/x/gidx"
)

// CreateExampleInput represents a mutation input for creating examples.
type CreateExampleInput struct {
	Name        string
	Description string
	TenantID    gidx.PrefixedID
}

// Mutate applies the CreateExampleInput on the ExampleMutation builder.
func (i *CreateExampleInput) Mutate(m *ExampleMutation) {
	m.SetName(i.Name)
	m.SetDescription(i.Description)
	m.SetTenantID(i.TenantID)
}

// SetInput applies the change-set in the CreateExampleInput on the ExampleCreate builder.
func (c *ExampleCreate) SetInput(i CreateExampleInput) *ExampleCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateExampleInput represents a mutation input for updating examples.
type UpdateExampleInput struct {
	Name        *string
	Description *string
}

// Mutate applies the UpdateExampleInput on the ExampleMutation builder.
func (i *UpdateExampleInput) Mutate(m *ExampleMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
}

// SetInput applies the change-set in the UpdateExampleInput on the ExampleUpdate builder.
func (c *ExampleUpdate) SetInput(i UpdateExampleInput) *ExampleUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateExampleInput on the ExampleUpdateOne builder.
func (c *ExampleUpdateOne) SetInput(i UpdateExampleInput) *ExampleUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
